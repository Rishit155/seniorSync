{"ast":null,"code":"var _jsxFileName = \"/Users/adnandhanaliwala/seniorSync/seniorSync/src/components/Metrics.js\";\nimport React from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Metrics extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sleepHours: 0,\n      stepsCompleted: 0,\n      breathingPatterns: [],\n      medicineConsistency: 0,\n      heartRate: 0,\n      bloodPressure: '120/80',\n      sleepPatternData: [],\n      // Data for Jane's sleeping patterns over the last month\n      stepsCompletedData: [],\n      medicineConsistencyData: [] // Data for Jane's medicine consistency over the last month\n    };\n    this.sleepPatternChartRef = /*#__PURE__*/React.createRef();\n    this.stepsCompletedChartRef = /*#__PURE__*/React.createRef();\n    this.medicineConsistencyChartRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {\n    // Fetch data for the elderly person's metrics from an API or database\n    this.fetchMetrics();\n    this.fetchSleepPatternData();\n    this.fetchMedicineConsistencyData();\n    this.fetchStepsCompletedData();\n  }\n  fetchMetrics() {\n    // Example API call or database query to fetch metrics data\n    // Replace this with your actual data fetching mechanism\n    // For demonstration purposes, I'm setting dummy data\n    const dummyData = {\n      sleepHours: 10,\n      stepsCompleted: 5000,\n      breathingPatterns: ['normal', 'normal', 'irregular', 'normal', 'normal'],\n      medicineConsistency: 85,\n      heartRate: 75,\n      bloodPressure: '120/80'\n    };\n\n    // Update state with fetched metrics data\n    this.setState({\n      sleepHours: dummyData.sleepHours,\n      stepsCompleted: dummyData.stepsCompleted,\n      breathingPatterns: dummyData.breathingPatterns,\n      medicineConsistency: dummyData.medicineConsistency,\n      heartRate: dummyData.heartRate,\n      bloodPressure: dummyData.bloodPressure\n    });\n  }\n  fetchSleepPatternData() {\n    // Example API call or database query to fetch sleep pattern data\n    // Replace this with your actual data fetching mechanism\n    // For demonstration purposes, I'm setting dummy data\n    const dummySleepPatternData = [{\n      date: '2023-01-01',\n      hours: 5.6\n    }, {\n      date: '2023-02-01',\n      hours: 5.8\n    }, {\n      date: '2023-03-01',\n      hours: 5.4\n    }, {\n      date: '2023-04-01',\n      hours: 6.2\n    }, {\n      date: '2023-05-01',\n      hours: 6.3\n    }, {\n      date: '2023-06-01',\n      hours: 6.8\n    }, {\n      date: '2023-07-01',\n      hours: 7.5\n    }, {\n      date: '2023-08-01',\n      hours: 7.8\n    }, {\n      date: '2023-09-01',\n      hours: 8\n    }, {\n      date: '2023-10-01',\n      hours: 8.2\n    }, {\n      date: '2023-11-01',\n      hours: 6.6\n    }, {\n      date: '2023-12-01',\n      hours: 6.5\n    }\n    // More data for the last month...\n    ];\n\n    // Update state with fetched sleep pattern data\n    this.setState({\n      sleepPatternData: dummySleepPatternData\n    }, () => {\n      // After state is updated, draw the sleep pattern graph\n      this.drawSleepPatternChart();\n    });\n  }\n  fetchMedicineConsistencyData() {\n    // Example API call or database query to fetch medicine consistency data\n    // Replace this with your actual data fetching mechanism\n    // For demonstration purposes, I'm setting dummy data\n    const dummyMedicineConsistencyData = [{\n      date: '2023-01-01',\n      consistency: 80\n    }, {\n      date: '2023-02-01',\n      consistency: 80\n    }, {\n      date: '2023-03-01',\n      consistency: 75\n    }, {\n      date: '2023-04-01',\n      consistency: 82\n    }, {\n      date: '2023-05-01',\n      consistency: 83\n    }, {\n      date: '2023-06-01',\n      consistency: 97\n    }, {\n      date: '2023-07-01',\n      consistency: 90\n    }, {\n      date: '2023-08-01',\n      consistency: 95\n    }, {\n      date: '2023-09-01',\n      consistency: 94\n    }, {\n      date: '2023-10-01',\n      consistency: 96\n    }, {\n      date: '2023-11-01',\n      consistency: 80\n    }, {\n      date: '2023-12-01',\n      consistency: 82\n    }\n\n    // More data for the last month...\n    ];\n\n    // Update state with fetched medicine consistency data\n    this.setState({\n      medicineConsistencyData: dummyMedicineConsistencyData\n    }, () => {\n      // After state is updated, draw the medicine consistency graph\n      this.drawMedicineConsistencyChart();\n    });\n  }\n  fetchStepsCompletedData() {\n    // Example API call or database query to fetch medicine consistency data\n    // Replace this with your actual data fetching mechanism\n    // For demonstration purposes, I'm setting dummy data\n    const dummyStepsCompletedData = [{\n      date: '2023-01-01',\n      consistency: 2500\n    }, {\n      date: '2023-02-01',\n      consistency: 2550\n    }, {\n      date: '2023-03-01',\n      consistency: 3005\n    }, {\n      date: '2023-04-01',\n      consistency: 3000\n    }, {\n      date: '2023-05-01',\n      consistency: 4000\n    }, {\n      date: '2023-06-01',\n      consistency: 5000\n    }, {\n      date: '2023-07-01',\n      consistency: 4540\n    }, {\n      date: '2023-08-01',\n      consistency: 900\n    }, {\n      date: '2023-09-01',\n      consistency: 2340\n    }, {\n      date: '2023-10-01',\n      consistency: 2454\n    }, {\n      date: '2023-11-01',\n      consistency: 4000\n    }, {\n      date: '2023-12-01',\n      consistency: 6999\n    }\n\n    // More data for the last month...\n    ];\n\n    // Update state with fetched medicine consistency data\n    this.setState({\n      stepsCompletedData: dummyStepsCompletedData\n    }, () => {\n      // After state is updated, draw the medicine consistency graph\n      this.drawStepsCompletedChart();\n    });\n  }\n  drawSleepPatternChart() {\n    const {\n      sleepPatternData\n    } = this.state;\n    const sleepPatternChartRef = this.sleepPatternChartRef.current.getContext('2d');\n\n    // Destroy existing chart if it exists\n    if (this.sleepPatternChart) {\n      this.sleepPatternChart.destroy();\n    }\n    this.sleepPatternChart = new Chart(sleepPatternChartRef, {\n      type: 'line',\n      data: {\n        labels: sleepPatternData.map(data => data.date),\n        datasets: [{\n          label: 'Sleep Hours',\n          data: sleepPatternData.map(data => data.hours),\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n          pointBorderColor: '#fff',\n          pointRadius: 5\n        }]\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: 'Jane\\'s Sleep Pattern Over the Last Year',\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Hours of Sleep'\n            },\n            beginAtZero: true,\n            suggestedMax: 10\n          }\n        }\n      }\n    });\n  }\n  drawMedicineConsistencyChart() {\n    const {\n      medicineConsistencyData\n    } = this.state;\n    const medicineConsistencyChartRef = this.medicineConsistencyChartRef.current.getContext('2d');\n\n    // Destroy existing chart if it exists\n    if (this.medicineConsistencyChart) {\n      this.medicineConsistencyChart.destroy();\n    }\n    this.medicineConsistencyChart = new Chart(medicineConsistencyChartRef, {\n      type: 'line',\n      data: {\n        labels: medicineConsistencyData.map(data => data.date),\n        datasets: [{\n          label: 'Medicine Consistency',\n          data: medicineConsistencyData.map(data => data.consistency),\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(255, 99, 132, 1)',\n          pointBorderColor: '#fff',\n          pointRadius: 5\n        }]\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: 'Jane\\'s Medicine Consistency Over the Last Year',\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Consistency (%)'\n            },\n            beginAtZero: true,\n            suggestedMax: 100\n          }\n        }\n      }\n    });\n  }\n  drawStepsCompletedChart() {\n    const {\n      stepsCompletedData\n    } = this.state;\n    const stepsCompletedChartRef = this.stepsCompletedChartRef.current.getContext('2d');\n\n    // Destroy existing chart if it exists\n    if (this.stepsCompletedChart) {\n      this.stepsCompletedChart.destroy();\n    }\n    this.stepsCompletedChart = new Chart(stepsCompletedChartRef, {\n      type: 'line',\n      data: {\n        labels: stepsCompletedData.map(data => data.date),\n        datasets: [{\n          label: 'Steps Completed',\n          data: stepsCompletedData.map(data => data.consistency),\n          // Change here\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n          pointBorderColor: '#fff',\n          pointRadius: 5\n        }]\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: 'Jane\\'s steps completed from the last year',\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Steps Completed'\n            },\n            beginAtZero: true,\n            suggestedMax: 9000\n          }\n        }\n      }\n    });\n  }\n  render() {\n    const {\n      sleepHours,\n      stepsCompleted,\n      breathingPatterns,\n      medicineConsistency,\n      heartRate,\n      bloodPressure\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.header,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: styles.headerText,\n          children: \"Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.metricsContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: styles.title,\n            children: \"Jane's Metrics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.metric,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Average Sleep Hours:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 15\n            }, this), \" \", sleepHours]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.metric,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Steps Completed:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this), \" \", stepsCompleted]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.metric,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Breathing Patterns:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this), \" \", breathingPatterns.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.metric,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Medicine Consistency:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this), \" \", medicineConsistency, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.metric,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Heart Rate:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), \" \", heartRate, \" bpm\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.metric,\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Blood Pressure:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this), \" \", bloodPressure]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.buttonsContainer,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: styles.button,\n              children: \"Call Doctor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: styles.button,\n              children: \"Call Jane\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chartContainer,\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: this.sleepPatternChartRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chartContainer,\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: this.medicineConsistencyChartRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.chartContainer,\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: this.stepsCompletedChartRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst styles = {\n  header: {\n    background: '#E0E0E0',\n    padding: '10px',\n    textAlign: 'center'\n  },\n  headerText: {\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    margin: '0'\n  },\n  container: {\n    background: '#E0F2F1',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  metricsContainer: {\n    padding: '20px',\n    background: '#FFFFFF',\n    borderRadius: '10px',\n    boxShadow: '0 0 10px rgba(0,0,0,0.1)',\n    marginBottom: '20px',\n    maxWidth: '600px',\n    width: '100%',\n    boxSizing: 'border-box'\n  },\n  title: {\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    marginBottom: '1rem',\n    textAlign: 'center'\n  },\n  metric: {\n    marginBottom: '0.5rem'\n  },\n  chartContainer: {\n    background: '#FFFFFF',\n    borderRadius: '10px',\n    boxShadow: '0 0 10px rgba(0,0,0,0.1)',\n    marginBottom: '20px',\n    maxWidth: '600px',\n    width: '100%',\n    boxSizing: 'border-box'\n  },\n  buttonsContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginTop: '1rem'\n  },\n  button: {\n    padding: '0.5rem 1rem',\n    fontSize: '1rem',\n    fontWeight: 'bold',\n    backgroundColor: '#4CAF50',\n    color: 'white',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  }\n};\nexport default Metrics;","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","Metrics","Component","constructor","props","state","sleepHours","stepsCompleted","breathingPatterns","medicineConsistency","heartRate","bloodPressure","sleepPatternData","stepsCompletedData","medicineConsistencyData","sleepPatternChartRef","createRef","stepsCompletedChartRef","medicineConsistencyChartRef","componentDidMount","fetchMetrics","fetchSleepPatternData","fetchMedicineConsistencyData","fetchStepsCompletedData","dummyData","setState","dummySleepPatternData","date","hours","drawSleepPatternChart","dummyMedicineConsistencyData","consistency","drawMedicineConsistencyChart","dummyStepsCompletedData","drawStepsCompletedChart","current","getContext","sleepPatternChart","destroy","type","data","labels","map","datasets","label","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","options","plugins","title","display","text","font","size","legend","scales","x","y","beginAtZero","suggestedMax","medicineConsistencyChart","stepsCompletedChart","render","children","style","styles","header","headerText","fileName","_jsxFileName","lineNumber","columnNumber","container","metricsContainer","metric","join","buttonsContainer","button","chartContainer","ref","background","padding","textAlign","fontSize","fontWeight","margin","flexDirection","alignItems","borderRadius","boxShadow","marginBottom","maxWidth","width","boxSizing","justifyContent","marginTop","color","border","cursor"],"sources":["/Users/adnandhanaliwala/seniorSync/seniorSync/src/components/Metrics.js"],"sourcesContent":["import React from 'react';\nimport Chart from 'chart.js/auto';\n\nclass Metrics extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sleepHours: 0,\n      stepsCompleted: 0,\n      breathingPatterns: [],\n      medicineConsistency: 0,\n      heartRate: 0,\n      bloodPressure: '120/80',\n      sleepPatternData: [], // Data for Jane's sleeping patterns over the last month\n      stepsCompletedData: [], \n      medicineConsistencyData: [] // Data for Jane's medicine consistency over the last month\n    };\n    this.sleepPatternChartRef = React.createRef();\n    this.stepsCompletedChartRef = React.createRef();\n    this.medicineConsistencyChartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // Fetch data for the elderly person's metrics from an API or database\n    this.fetchMetrics();\n    this.fetchSleepPatternData();\n    this.fetchMedicineConsistencyData();\n    this.fetchStepsCompletedData();\n  }\n\n  fetchMetrics() {\n    // Example API call or database query to fetch metrics data\n    // Replace this with your actual data fetching mechanism\n    // For demonstration purposes, I'm setting dummy data\n    const dummyData = {\n      sleepHours: 10,\n      stepsCompleted: 5000,\n      breathingPatterns: ['normal', 'normal', 'irregular', 'normal', 'normal'],\n      medicineConsistency: 85,\n      heartRate: 75,\n      bloodPressure: '120/80'\n    };\n\n    // Update state with fetched metrics data\n    this.setState({\n      sleepHours: dummyData.sleepHours,\n      stepsCompleted: dummyData.stepsCompleted,\n      breathingPatterns: dummyData.breathingPatterns,\n      medicineConsistency: dummyData.medicineConsistency,\n      heartRate: dummyData.heartRate,\n      bloodPressure: dummyData.bloodPressure\n    });\n  }\n\n  fetchSleepPatternData() {\n    // Example API call or database query to fetch sleep pattern data\n    // Replace this with your actual data fetching mechanism\n    // For demonstration purposes, I'm setting dummy data\n    const dummySleepPatternData = [\n      { date: '2023-01-01', hours: 5.6 },\n      { date: '2023-02-01', hours: 5.8 },\n      { date: '2023-03-01', hours: 5.4 },\n      { date: '2023-04-01', hours: 6.2 },\n      { date: '2023-05-01', hours: 6.3 },\n      { date: '2023-06-01', hours: 6.8 },\n      { date: '2023-07-01', hours: 7.5 },\n      { date: '2023-08-01', hours: 7.8 },\n      { date: '2023-09-01', hours: 8 },\n      { date: '2023-10-01', hours: 8.2 },\n      { date: '2023-11-01', hours: 6.6 },\n      { date: '2023-12-01', hours: 6.5 },\n      // More data for the last month...\n    ];\n\n    // Update state with fetched sleep pattern data\n    this.setState({ sleepPatternData: dummySleepPatternData }, () => {\n      // After state is updated, draw the sleep pattern graph\n      this.drawSleepPatternChart();\n    });\n  }\n\n  fetchMedicineConsistencyData() {\n    // Example API call or database query to fetch medicine consistency data\n    // Replace this with your actual data fetching mechanism\n    // For demonstration purposes, I'm setting dummy data\n    const dummyMedicineConsistencyData = [\n      { date: '2023-01-01', consistency: 80 },\n      { date: '2023-02-01', consistency: 80 },\n      { date: '2023-03-01', consistency: 75 },\n      { date: '2023-04-01', consistency: 82 },\n      { date: '2023-05-01', consistency: 83 },\n      { date: '2023-06-01', consistency: 97 },\n      { date: '2023-07-01', consistency: 90 },\n      { date: '2023-08-01', consistency: 95 },\n      { date: '2023-09-01', consistency: 94 },\n      { date: '2023-10-01', consistency: 96 },\n      { date: '2023-11-01', consistency: 80 },\n      { date: '2023-12-01', consistency: 82 },\n\n      // More data for the last month...\n    ];\n\n    // Update state with fetched medicine consistency data\n    this.setState({ medicineConsistencyData: dummyMedicineConsistencyData }, () => {\n      // After state is updated, draw the medicine consistency graph\n      this.drawMedicineConsistencyChart();\n    });\n  }\n\n  fetchStepsCompletedData() {\n    // Example API call or database query to fetch medicine consistency data\n    // Replace this with your actual data fetching mechanism\n    // For demonstration purposes, I'm setting dummy data\n    const dummyStepsCompletedData = [\n      { date: '2023-01-01', consistency: 2500 },\n      { date: '2023-02-01', consistency: 2550 },\n      { date: '2023-03-01', consistency: 3005 },\n      { date: '2023-04-01', consistency: 3000 },\n      { date: '2023-05-01', consistency: 4000 },\n      { date: '2023-06-01', consistency: 5000 },\n      { date: '2023-07-01', consistency: 4540 },\n      { date: '2023-08-01', consistency: 900 },\n      { date: '2023-09-01', consistency: 2340 },\n      { date: '2023-10-01', consistency: 2454 },\n      { date: '2023-11-01', consistency: 4000 },\n      { date: '2023-12-01', consistency: 6999 },\n\n      // More data for the last month...\n    ];\n\n    // Update state with fetched medicine consistency data\n    this.setState({ stepsCompletedData: dummyStepsCompletedData }, () => {\n      // After state is updated, draw the medicine consistency graph\n      this.drawStepsCompletedChart();\n    });\n  }\n\n  drawSleepPatternChart() {\n    const { sleepPatternData } = this.state;\n    const sleepPatternChartRef = this.sleepPatternChartRef.current.getContext('2d');\n\n    // Destroy existing chart if it exists\n    if (this.sleepPatternChart) {\n      this.sleepPatternChart.destroy();\n    }\n\n    this.sleepPatternChart = new Chart(sleepPatternChartRef, {\n      type: 'line',\n      data: {\n        labels: sleepPatternData.map(data => data.date),\n        datasets: [{\n          label: 'Sleep Hours',\n          data: sleepPatternData.map(data => data.hours),\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n          pointBorderColor: '#fff',\n          pointRadius: 5\n        }]\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: 'Jane\\'s Sleep Pattern Over the Last Year',\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Hours of Sleep'\n            },\n            beginAtZero: true,\n            suggestedMax: 10\n          }\n        }\n      }\n    });\n  }\n\n  drawMedicineConsistencyChart() {\n    const { medicineConsistencyData } = this.state;\n    const medicineConsistencyChartRef = this.medicineConsistencyChartRef.current.getContext('2d');\n\n    // Destroy existing chart if it exists\n    if (this.medicineConsistencyChart) {\n      this.medicineConsistencyChart.destroy();\n    }\n\n    this.medicineConsistencyChart = new Chart(medicineConsistencyChartRef, {\n      type: 'line',\n      data: {\n        labels: medicineConsistencyData.map(data => data.date),\n        datasets: [{\n          label: 'Medicine Consistency',\n          data: medicineConsistencyData.map(data => data.consistency),\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgba(255, 99, 132, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(255, 99, 132, 1)',\n          pointBorderColor: '#fff',\n          pointRadius: 5\n        }]\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: 'Jane\\'s Medicine Consistency Over the Last Year',\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Consistency (%)'\n            },\n            beginAtZero: true,\n            suggestedMax: 100\n          }\n        }\n      }\n    });\n  }\n\n  drawStepsCompletedChart() {\n    const { stepsCompletedData } = this.state;\n    const stepsCompletedChartRef = this.stepsCompletedChartRef.current.getContext('2d');\n  \n    // Destroy existing chart if it exists\n    if (this.stepsCompletedChart) {\n      this.stepsCompletedChart.destroy();\n    }\n  \n    this.stepsCompletedChart = new Chart(stepsCompletedChartRef, {\n      type: 'line',\n      data: {\n        labels: stepsCompletedData.map(data => data.date),\n        datasets: [{\n          label: 'Steps Completed',\n          data: stepsCompletedData.map(data => data.consistency), // Change here\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 2,\n          pointBackgroundColor: 'rgba(54, 162, 235, 1)',\n          pointBorderColor: '#fff',\n          pointRadius: 5\n        }]\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: 'Jane\\'s steps completed from the last year',\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Steps Completed'\n            },\n            beginAtZero: true,\n            suggestedMax: 9000\n          }\n        }\n      }\n    });\n  }\n  \n\n\n  render() {\n    const { sleepHours, stepsCompleted, breathingPatterns, medicineConsistency, heartRate, bloodPressure } = this.state;\n  \n    return (\n      <div>\n        <div style={styles.header}>\n          <h2 style={styles.headerText}>Metrics</h2>\n        </div>\n        <div style={styles.container}>\n          <div style={styles.metricsContainer}>\n            <h3 style={styles.title}>Jane's Metrics</h3>\n            <div style={styles.metric}>\n              <strong>Average Sleep Hours:</strong> {sleepHours}\n            </div>\n            <div style={styles.metric}>\n              <strong>Steps Completed:</strong> {stepsCompleted}\n            </div>\n            <div style={styles.metric}>\n              <strong>Breathing Patterns:</strong> {breathingPatterns.join(', ')}\n            </div>\n            <div style={styles.metric}>\n              <strong>Medicine Consistency:</strong> {medicineConsistency}%\n            </div>\n            <div style={styles.metric}>\n              <strong>Heart Rate:</strong> {heartRate} bpm\n            </div>\n            <div style={styles.metric}>\n              <strong>Blood Pressure:</strong> {bloodPressure}\n            </div>\n            <div style={styles.buttonsContainer}>\n              <button style={styles.button}>Call Doctor</button>\n              <button style={styles.button}>Call Jane</button>\n            </div>\n          </div>\n          <div style={styles.chartContainer}>\n            <canvas ref={this.sleepPatternChartRef}></canvas>\n          </div>\n          <div style={styles.chartContainer}>\n            <canvas ref={this.medicineConsistencyChartRef}></canvas>\n          </div>\n          <div style={styles.chartContainer}>\n            <canvas ref={this.stepsCompletedChartRef}></canvas>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nconst styles = {\n  header: {\n    background: '#E0E0E0',\n    padding: '10px',\n    textAlign: 'center',\n  },\n  headerText: {\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    margin: '0',\n  },\n  container: {\n    background: '#E0F2F1',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  metricsContainer: {\n    padding: '20px',\n    background: '#FFFFFF',\n    borderRadius: '10px',\n    boxShadow: '0 0 10px rgba(0,0,0,0.1)',\n    marginBottom: '20px',\n    maxWidth: '600px',\n    width: '100%',\n    boxSizing: 'border-box',\n  },\n  title: {\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    marginBottom: '1rem',\n    textAlign: 'center',\n  },\n  metric: {\n    marginBottom: '0.5rem',\n  },\n  chartContainer: {\n    background: '#FFFFFF',\n    borderRadius: '10px',\n    boxShadow: '0 0 10px rgba(0,0,0,0.1)',\n    marginBottom: '20px',\n    maxWidth: '600px',\n    width: '100%',\n    boxSizing: 'border-box',\n  },\n  buttonsContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginTop: '1rem',\n  },\n  button: {\n    padding: '0.5rem 1rem',\n    fontSize: '1rem',\n    fontWeight: 'bold',\n    backgroundColor: '#4CAF50',\n    color: 'white',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n  },\n};\n\nexport default Metrics;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}